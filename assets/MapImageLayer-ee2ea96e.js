import{bl as w,a7 as $,c_ as b,b4 as f,d5 as I,a2 as g,as as O,d6 as T,d7 as E,U as v,d as M,a as s,b as p,d8 as x,ay as R,av as L,c as P,bn as j,au as F}from"./index-7963d4d4.js";import{O as N}from"./MultiOriginJSONSupport-83229f36.js";import{i as J}from"./APIKeyMixin-df800849.js";import{E as U,f as q,Y as k}from"./SublayersOwner-4fe0eb5b.js";import{l as A}from"./ArcGISService-adb6121f.js";import{a as _}from"./BlendLayer-67be0a8f.js";import{o as V}from"./CustomParametersMixin-a393e1d0.js";import{c as z}from"./OperationalLayer-3a2f433d.js";import{j as B}from"./PortalLayer-92877bf2.js";import{p as C}from"./RefreshableLayer-2eb6c233.js";import{t as D}from"./ScaleRangeLayer-b13c2b3b.js";import{a as G}from"./TemporalLayer-d4a7784e.js";import{f as H}from"./commonProperties-6814a39e.js";import{m as K}from"./ExportImageParameters-0ba85948.js";import{t as W}from"./imageBitmapUtils-59f91e38.js";import{e as S}from"./sublayerUtils-356befca.js";import{e as Y}from"./versionUtils-388d46f9.js";import"./DictionaryLoader-3032dcef.js";import"./LRUCache-50962364.js";import"./FieldsIndex-86e1c691.js";import"./portalItemUtils-abfce48b.js";import"./UniqueValueRenderer-d9c6adaa.js";import"./LegendOptions-abb39b11.js";import"./diffUtils-c3909250.js";import"./SizeVariable-30352570.js";import"./colorRamps-4a2c033a.js";import"./lengthUtils-3299f41f.js";import"./ColorStop-9a1877a7.js";import"./featureFlags-170ded2f.js";import"./styleUtils-90aa8275.js";import"./jsonUtils-55a27fb8.js";import"./heatmapUtils-c2534201.js";import"./vec4f64-aa64c7e9.js";import"./LabelClass-3855bc1c.js";import"./labelUtils-29518584.js";import"./defaultsJSON-b087dd4d.js";import"./QueryTask-1cba7d5b.js";import"./Query-9b208b7c.js";import"./Field-d77a8215.js";import"./fieldType-673942bd.js";import"./executeForIds-4b62dd66.js";import"./query-1a324482.js";import"./normalizeUtils-177a2192.js";import"./normalizeUtilsCommon-062a2641.js";import"./pbfQueryUtils-88730ed8.js";import"./pbf-5049679b.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-b61e2d05.js";import"./executeQueryJSON-84f2d0a5.js";import"./FeatureSet-dbb0e0b5.js";import"./executeQueryPBF-e314ffee.js";import"./featureConversionUtils-b964f182.js";import"./FeatureType-1aef3ea6.js";import"./FeatureTemplate-ce4177e4.js";import"./labelingInfo-57ed1c35.js";import"./serviceCapabilitiesUtils-ea9bb8d4.js";import"./AttachmentQuery-f2e0d44e.js";import"./popupUtils-5de65a0b.js";import"./jsonUtils-1f71c911.js";import"./parser-554850ab.js";import"./ElevationInfo-ee94dcc6.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(G(D(U(q(A(z(B(N(C(J(V(w(j))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const m=o.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,m,t){var y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=S(a,c.sublayers,b(c.origin))}}const l=[],h={writeSublayerStructure:n,...t};let d=n;a.forEach(r=>{const c=r.write({},h);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),d&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,m,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new K({layer:this,floors:t==null?void 0:t.floors,scale:I({extent:e,width:o})*a}),l=n.toJSON();n.destroy();const h=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},d=e&&e.spatialReference,y=d.wkid||JSON.stringify(d.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:o+","+m,...l,...h,...r}}async fetchImage(e,o,m,t){const{data:a}=await this._fetchImage("image",e,o,m,t);return a}async fetchImageBitmap(e,o,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,m,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&O.fromJSON(l),timeExtent:n&&T.fromJSON({start:n[0],end:n[1]})}}loadAll(){return E(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,m,t,a){var h,d,y;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((h=n.query)==null?void 0:h.dynamicLayers)!=null&&!((y=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw M(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:x})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([R("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:x})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([L("sublayers",{layers:{type:[k]},visibleLayers:{type:[F]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(H)],i.prototype,"url",void 0),i=s([P("esri.layers.MapImageLayer")],i);const at=i;export{at as default};
