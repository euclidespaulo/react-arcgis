import{a as o,b as p,c as m,i as g,d as l,s as d,l as u}from"./index-cc0ee9b2.js";import{a as c}from"./BitmapContainer-fe6e3851.js";import{f as y,d as f}from"./LayerView-9a13043e.js";import{o as x}from"./GraphicsView2D-b512fcb0.js";import{n as w}from"./HighlightGraphicContainer-3680f500.js";import{v}from"./ExportStrategy-bd33f5a9.js";import{b as _}from"./commonProperties-2a96b451.js";import{m as H}from"./ExportImageParameters-99ca41aa.js";import{a as I}from"./RefreshableLayerView-fa03773e.js";import{U,r as V}from"./drapedUtils-ce55cbd7.js";import"./WGLContainer-7ef41b2a.js";import"./definitions-a1a4a3f0.js";import"./VertexArrayObject-543ec7e5.js";import"./Texture-5990832d.js";import"./enums-b14466b3.js";import"./VertexElementDescriptor-2925c6af.js";import"./color-a4a9afe7.js";import"./enums-f1a6a48a.js";import"./ProgramTemplate-21b8f5f6.js";import"./GeometryUtils-6eab8caf.js";import"./heatmapUtils-8f838e1c.js";import"./vec4f64-aa64c7e9.js";import"./StyleDefinition-29c49b98.js";import"./config-1337d16e.js";import"./Container-be4e1fda.js";import"./parser-7cb9f852.js";import"./earcut-046ea0be.js";import"./featureConversionUtils-21ed310a.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./ExpandedCIM-96c68dce.js";import"./BidiEngine-9a40f2f4.js";import"./GeometryUtils-984e8446.js";import"./utils-a1be5c9b.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-dec0b0c6.js";import"./floatRGBA-b70dad87.js";import"./normalizeUtilsSync-77d17e82.js";import"./normalizeUtilsCommon-5daab86a.js";import"./projectionSupport-3798f02e.js";import"./json-48e3ea08.js";import"./LabelClass-889faf92.js";import"./labelUtils-1b17ff16.js";import"./defaultsJSON-b087dd4d.js";import"./featureFlags-b7471751.js";import"./AttributeStoreView-2f159b09.js";import"./TiledDisplayObject-a281f45f.js";import"./diffUtils-232a480c.js";import"./labelingInfo-48e3897a.js";import"./visualVariablesUtils-bc394404.js";import"./clusterUtils-d9d6aed2.js";import"./SizeVariable-c56811d6.js";import"./colorRamps-756b6677.js";import"./LegendOptions-a48dfe3c.js";import"./lengthUtils-80770c4f.js";import"./util-910d5068.js";import"./Matcher-1c0902db.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-3a1c2e37.js";import"./LRUCache-347f2d39.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-26d43f85.js";import"./webStyleSymbolUtils-caa3c2e6.js";import"./ComputedAttributeStorage-ddbc533f.js";import"./FieldsIndex-05a45e5a.js";import"./arcadeTimeUtils-2a0a8943.js";import"./executionError-c92d3b85.js";import"./normalizeUtils-9942c350.js";import"./BaseGraphicContainer-8f673372.js";import"./FeatureContainer-75ff3578.js";import"./TileContainer-614ad5dc.js";import"./vec3f32-ad1dc57f.js";import"./Bitmap-d040d28f.js";import"./ElevationInfo-18e9ce10.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-592d320a.js";import"./popupUtils-7c49fd0a.js";const P=t=>{let i=class extends t{initialize(){this.exportImageParameters=new H({layer:this.layer})}destroy(){this.exportImageParameters.destroy(),this.exportImageParameters=null}get floors(){var e;return((e=this.view)==null?void 0:e.floors)??null}get exportImageVersion(){var e;return(e=this.exportImageParameters)==null||e.commitProperty("version"),this.commitProperty("timeExtent"),this.commitProperty("floors"),(this._get("exportImageVersion")||0)+1}canResume(){var e;return!!super.canResume()&&!((e=this.timeExtent)!=null&&e.isEmpty)}};return o([p()],i.prototype,"exportImageParameters",void 0),o([p({readOnly:!0})],i.prototype,"floors",null),o([p({readOnly:!0})],i.prototype,"exportImageVersion",null),o([p()],i.prototype,"layer",void 0),o([p()],i.prototype,"suspended",void 0),o([p(_)],i.prototype,"timeExtent",void 0),i=o([m("esri.views.layers.MapImageLayerView")],i),i};let a=class extends P(I(y(f))){constructor(){super(...arguments),this._highlightGraphics=new g,this._updateHash=""}fetchPopupFeatures(t,i){return this._popupHighlightHelper.fetchPopupFeatures(t,i)}update(t){const i=`${this.exportImageVersion}/${t.state.id}/${t.pixelRatio}/${t.stationary}`;this._updateHash!==i&&(this._updateHash=i,this.strategy.update(t).catch(r=>{l(r)||d.getLogger(this).error(r)}),t.stationary&&this._popupHighlightHelper.updateHighlightedFeatures(t.state.resolution)),this._highlightView.processUpdate(t)}attach(){const{imageMaxWidth:t,imageMaxHeight:i,version:r}=this.layer,e=r>=10.3,n=r>=10;this._bitmapContainer=new c,this.container.addChild(this._bitmapContainer),this._highlightView=new x({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new w(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1}),this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new U({createFetchPopupFeaturesQueryGeometry:(s,h)=>V(s,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(s,h)=>{this._highlightView.graphicUpdateHandler({graphic:s,property:h})},layerView:this,updatingHandles:this.updatingHandles}),this.strategy=new v({container:this._bitmapContainer,fetchSource:this.fetchImageBitmap.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:t,imageMaxHeight:i,imageRotationSupported:e,imageNormalizationSupported:n,hidpi:!0}),this.addAttachHandles(u(()=>this.exportImageVersion,()=>this.requestUpdate())),this.requestUpdate()}detach(){this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren(),this._highlightView.destroy(),this._popupHighlightHelper.destroy()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}async doRefresh(){this._updateHash="",this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,i,r,e){return this.layer.fetchImage(t,i,r,{timeExtent:this.timeExtent,floors:this.floors,...e})}fetchImageBitmap(t,i,r,e){return this.layer.fetchImageBitmap(t,i,r,{timeExtent:this.timeExtent,floors:this.floors,...e})}highlight(t){return this._popupHighlightHelper.highlight(t)}};o([p()],a.prototype,"strategy",void 0),o([p()],a.prototype,"updating",void 0),a=o([m("esri.views.2d.layers.MapImageLayerView2D")],a);const Xt=a;export{Xt as default};
