import{i as w,h as y,y as I,r as V,l as v,S as H,d as m,e as g,s as T,a as l,b as n,c as q}from"./index-cc0ee9b2.js";import"./MagnifierPrograms-346f0d32.js";import"./Container-be4e1fda.js";import"./BufferPool-86bc1ff0.js";import"./color-a4a9afe7.js";import"./WGLContainer-7ef41b2a.js";import"./enums-b14466b3.js";import"./Texture-5990832d.js";import"./ProgramTemplate-21b8f5f6.js";import"./definitions-a1a4a3f0.js";import"./GeometryUtils-6eab8caf.js";import"./VertexArrayObject-543ec7e5.js";import"./StyleDefinition-29c49b98.js";import"./enums-fb086c25.js";import"./OrderIndependentTransparency-309a1bc3.js";import"./floatRGBA-b70dad87.js";import"./testSVGPremultipliedAlpha-d606606f.js";import{o as U}from"./GraphicsView2D-b512fcb0.js";import"./AttributeStoreView-2f159b09.js";import"./earcut-046ea0be.js";import"./featureConversionUtils-21ed310a.js";import"./lengthUtils-80770c4f.js";import"./vec3f32-ad1dc57f.js";import"./normalizeUtils-9942c350.js";import{t as S,o as f,n as d}from"./imageUtils-a980f99e.js";import{f as Q,d as b}from"./LayerView-9a13043e.js";import{n as C}from"./HighlightGraphicContainer-3680f500.js";import{a as k}from"./RefreshableLayerView-fa03773e.js";import{S as F,U as R,r as G}from"./drapedUtils-ce55cbd7.js";import"./ExpandedCIM-96c68dce.js";import"./BidiEngine-9a40f2f4.js";import"./OptimizedGeometry-33b2eb0d.js";import"./GeometryUtils-984e8446.js";import"./enums-f1a6a48a.js";import"./utils-a1be5c9b.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-dec0b0c6.js";import"./rasterizingUtils-facfa24a.js";import"./pbf-7c0046e6.js";import"./imageutils-f367a66b.js";import"./Matcher-1c0902db.js";import"./visualVariablesUtils-bc394404.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-3a1c2e37.js";import"./defaultsJSON-b087dd4d.js";import"./LRUCache-347f2d39.js";import"./devEnvironmentUtils-5002a058.js";import"./styleUtils-26d43f85.js";import"./featureFlags-b7471751.js";import"./webStyleSymbolUtils-caa3c2e6.js";import"./CircularArray-ef508845.js";import"./throttle-7bf02de9.js";import"./ComputedAttributeStorage-ddbc533f.js";import"./FieldsIndex-05a45e5a.js";import"./arcadeTimeUtils-2a0a8943.js";import"./executionError-c92d3b85.js";import"./projectionSupport-3798f02e.js";import"./json-48e3ea08.js";import"./diffUtils-232a480c.js";import"./parser-7cb9f852.js";import"./VertexElementDescriptor-2925c6af.js";import"./heatmapUtils-8f838e1c.js";import"./vec4f64-aa64c7e9.js";import"./config-1337d16e.js";import"./basicInterfaces-4ab7cc6a.js";import"./normalizeUtilsSync-77d17e82.js";import"./normalizeUtilsCommon-5daab86a.js";import"./LabelClass-889faf92.js";import"./labelUtils-1b17ff16.js";import"./TiledDisplayObject-a281f45f.js";import"./labelingInfo-48e3897a.js";import"./clusterUtils-d9d6aed2.js";import"./SizeVariable-c56811d6.js";import"./colorRamps-756b6677.js";import"./LegendOptions-a48dfe3c.js";import"./util-910d5068.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./BitmapTileContainer-37b7de65.js";import"./Bitmap-d040d28f.js";import"./TileContainer-614ad5dc.js";import"./BaseGraphicContainer-8f673372.js";import"./FeatureContainer-75ff3578.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-592d320a.js";import"./popupUtils-7c49fd0a.js";const L=[0,0];let s=class extends k(S(Q(b))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),F(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new R({createFetchPopupFeaturesQueryGeometry:(r,h)=>G(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(L,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(p){if(!m(p)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new g(u),_=await this.fetchTile(c,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,c,t)}}throw p}const o=new g(0,0,0,0);let a;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,o,{signal:r}),o.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);a=await this._fetchImage(o,r)}catch(p){if(m(p))throw p;a=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,a,o,t):a}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.requestRender(),t.once("attach",()=>this.requestUpdate())}catch(e){m(e)||T.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};l([n()],s.prototype,"_fetchQueue",void 0),l([n()],s.prototype,"resampling",null),l([n()],s.prototype,"tilemapCache",null),s=l([q("esri.views.2d.layers.TileLayerView2D")],s);const ce=s;export{ce as default};
