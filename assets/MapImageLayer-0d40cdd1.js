import{bl as w,a7 as $,c_ as b,b4 as f,d5 as I,a2 as g,as as O,d6 as T,d7 as E,U as v,d as M,a as s,b as p,d8 as x,ay as R,av as L,c as P,bn as j,au as F}from"./index-cc0ee9b2.js";import{O as N}from"./MultiOriginJSONSupport-ad3656cb.js";import{i as J}from"./APIKeyMixin-648febcf.js";import{E as U,f as q,Y as k}from"./SublayersOwner-e5f853c8.js";import{l as A}from"./ArcGISService-aea881d2.js";import{a as _}from"./BlendLayer-bd7e52ec.js";import{o as V}from"./CustomParametersMixin-4b130093.js";import{c as z}from"./OperationalLayer-198aa482.js";import{j as B}from"./PortalLayer-cc2d9fe0.js";import{p as C}from"./RefreshableLayer-74995653.js";import{t as D}from"./ScaleRangeLayer-19572bd4.js";import{a as G}from"./TemporalLayer-fade5e60.js";import{f as H}from"./commonProperties-2a96b451.js";import{m as K}from"./ExportImageParameters-99ca41aa.js";import{t as W}from"./imageBitmapUtils-2fb2ff76.js";import{e as S}from"./sublayerUtils-592d320a.js";import{e as Y}from"./versionUtils-8d790ec0.js";import"./DictionaryLoader-99da79b0.js";import"./LRUCache-347f2d39.js";import"./FieldsIndex-05a45e5a.js";import"./portalItemUtils-b1a175c4.js";import"./UniqueValueRenderer-dfcbf549.js";import"./LegendOptions-a48dfe3c.js";import"./diffUtils-232a480c.js";import"./SizeVariable-c56811d6.js";import"./colorRamps-756b6677.js";import"./lengthUtils-80770c4f.js";import"./ColorStop-4b4d398e.js";import"./featureFlags-b7471751.js";import"./styleUtils-26d43f85.js";import"./jsonUtils-fe49b272.js";import"./heatmapUtils-8f838e1c.js";import"./vec4f64-aa64c7e9.js";import"./LabelClass-889faf92.js";import"./labelUtils-1b17ff16.js";import"./defaultsJSON-b087dd4d.js";import"./QueryTask-440f0a76.js";import"./Query-39fea8fb.js";import"./Field-bf5ace58.js";import"./fieldType-a8735abb.js";import"./executeForIds-8d81d566.js";import"./query-acd694de.js";import"./normalizeUtils-9942c350.js";import"./normalizeUtilsCommon-5daab86a.js";import"./pbfQueryUtils-a36d982e.js";import"./pbf-7c0046e6.js";import"./OptimizedGeometry-33b2eb0d.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-ac0e78a5.js";import"./executeQueryJSON-fc088a37.js";import"./FeatureSet-a5d2b0a7.js";import"./executeQueryPBF-a81dfc13.js";import"./featureConversionUtils-21ed310a.js";import"./FeatureType-7e2e1119.js";import"./FeatureTemplate-87d6fd73.js";import"./labelingInfo-48e3897a.js";import"./serviceCapabilitiesUtils-5e90b29f.js";import"./AttachmentQuery-c7c7e92b.js";import"./popupUtils-e2d577d1.js";import"./jsonUtils-ac963ed3.js";import"./parser-7cb9f852.js";import"./ElevationInfo-18e9ce10.js";import"./floorFilterUtils-080a7cd2.js";let i=class extends _(G(D(U(q(A(z(B(N(C(J(V(w(j))))))))))))){constructor(...e){super(...e),this.dateFieldsTimeReference=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeReference=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,o){return typeof e=="string"?{url:e,...o}:e}load(e){const o=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(o))),Promise.resolve(this)}readImageFormat(e,o){const m=o.supportedImageFormatTypes;return m&&m.includes("PNG32")?"png32":"png24"}writeSublayers(e,o,m,t){var y;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((y=this.capabilities.exportMap)!=null&&y.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const c=this.createSublayersForOrigin("service").sublayers;n=S(a,c,f.SERVICE)}else if(r>f.PORTAL_ITEM){const c=this.createSublayersForOrigin("portal-item");n=S(a,c.sublayers,b(c.origin))}}const l=[],h={writeSublayerStructure:n,...t};let d=n;a.forEach(r=>{const c=r.write({},h);l.push(c),d=d||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(o.layers=l),d&&(o.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,o,m,t){const a=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new K({layer:this,floors:t==null?void 0:t.floors,scale:I({extent:e,width:o})*a}),l=n.toJSON();n.destroy();const h=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},d=e&&e.spatialReference,y=d.wkid||JSON.stringify(d.toJSON());l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:c,end:u}=t.timeExtent.toJSON();r.time=c&&u&&c===u?""+c:`${c??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:y,imageSR:y,size:o+","+m,...l,...h,...r}}async fetchImage(e,o,m,t){const{data:a}=await this._fetchImage("image",e,o,m,t);return a}async fetchImageBitmap(e,o,m,t){const{data:a,url:n}=await this._fetchImage("blob",e,o,m,t);return W(a,n,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const o={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:m}=await g(this.url,o),{extent:t,fullExtent:a,timeExtent:n}=m,l=t||a;return{fullExtent:l&&O.fromJSON(l),timeExtent:n&&T.fromJSON({start:n[0],end:n[1]})}}loadAll(){return E(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,o,m,t,a){var h,d,y;const n={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(o,m,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((h=n.query)==null?void 0:h.dynamicLayers)!=null&&!((y=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:n.query});try{const{data:r}=await g(l,n);return{data:r,url:l}}catch(r){throw M(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:o,ssl:m}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});m&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=o,this.read(o,{origin:"service",url:this.parsedUrl})}};s([p({type:x})],i.prototype,"dateFieldsTimeReference",void 0),s([p({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),s([p()],i.prototype,"dpi",void 0),s([p()],i.prototype,"gdbVersion",void 0),s([p()],i.prototype,"imageFormat",void 0),s([R("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),s([p()],i.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([p({type:x})],i.prototype,"preferredTimeReference",void 0),s([p()],i.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),s([L("sublayers",{layers:{type:[k]},visibleLayers:{type:[F]}})],i.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),s([p(H)],i.prototype,"url",void 0),i=s([P("esri.layers.MapImageLayer")],i);const at=i;export{at as default};
